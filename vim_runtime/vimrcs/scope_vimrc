"
set notagrelative
set cscopetag
""""""""""""""""""""""""""""""""""""""""""""""""""
""" cscope
""""""""""""""""""""""""""""""""""""""""""""""""""
" auto load cscope
if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=0 "use cscope as default tag
    set cst
    set nocsverb
	" there is a built-in plugin: cscope_map.vim 
	" " add any database in current directory
    " " add in cscope_maps.plugins
    if filereadable("cscope.out")
        cs add cscope.out
    " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb
    set cscopequickfix=s-,g-,c-,d-,t-,e-,f-,i-
endif
" nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
" nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
" nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
""" Universal-ctags
""""""""""""""""""""""""""""""""""""""""""""""""""
" search tags in current dir or ';' means search in parent folder
set tags=./tags;,tags



""""""""""""""""""""""""""""""""""""""""""""""""""
""" GTAGS
""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:Gtags_Auto_Map = 1

""""""""""""""""""""""""""""""""""""""""""""""""""
""" GTAGS cscope
""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:GtagsCscope_Auto_Map = 1
" let g:GtagsCscope_Ignore_Case = 1
" let g:GtagsCscope_Keep_Alive = 1
" let g:GtagsCscope_Auto_Load = 1
" let g:GtagsCscope_Auto_Update = 1
set cscopeprg=gtags-cscope
" the postfix 'a' means absoulate path
" cs add GTAGS a

" settings of cscope.
" I use GNU global instead cscope because global is faster.
set cscopequickfix=c-,d-,e-,f-,g0,i-,s-,t-
nmap <silent> <leader>j <ESC>:cstag <c-r><c-w><CR>
nmap <silent> <leader>g <ESC>:lcs f c <c-r><c-w><cr>:lw<cr>
nmap <silent> <leader>s <ESC>:lcs f s <c-r><c-w><cr>:lw<cr>
command! -nargs=+ -complete=dir FindFiles :call FindFiles(<f-args>)
" au VimEnter * call VimEnterCallback()
" au BufAdd *.[ch] call FindGtags(expand('<afile>'))
" au BufWritePost *.[ch] call UpdateGtags(expand('<afile>'))
"   
" function! FindFiles(pat, ...)
"      let path = ''
"      for str in a:000
"          let path .= str . ','
"      endfor
"   
"      if path == ''
"          let path = &path
"      endif
"   
"      echo 'finding...'
"      redraw
"      call append(line('$'), split(globpath(path, a:pat), '\n'))
"      echo 'finding...done!'
"      redraw
" endfunc
"   
" function! VimEnterCallback()
"      for f in argv()
"          if fnamemodify(f, ':e') != 'c' && fnamemodify(f, ':e') != 'h'
"              continue
"          endif
"   
"          call FindGtags(f)
"      endfor
" endfunc
"   
" function! FindGtags(f)
"      let dir = fnamemodify(a:f, ':p:h')
"      while 1
"          let tmp = dir . '/GTAGS'
"          if filereadable(tmp)
" 			" the postfix 'a' means absoulate path
"              exe 'cs add ' . tmp . ' ' . dir . ' a'
"              break
"          elseif dir == '/'
"              break
" 		 else
" 			 exe '!goproj.sh'
"          endif
"   
"          let dir = fnamemodify(dir, ":h")
"      endwhile
" endfunc
"   
" function! UpdateGtags(f)
"      let dir = fnamemodify(a:f, ':p:h')
"      exe 'silent !cd ' . dir . ' && global -ua &> /dev/null &'
" endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""
""" end of GTAGS cscope
""""""""""""""""""""""""""""""""""""""""""""""""""
